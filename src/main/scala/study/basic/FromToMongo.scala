package study.basic

import org.apache.hadoop.conf.Configuration
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.SparkContext
import org.bson.{BasicBSONObject, BSONObject}

/**
 *读取mongo数据并将结果存放到mongo中
 */
object FromToMongo {
  def main(args: Array[String]) {
    val sparkConf = new SparkConf()
    sparkConf.setAppName("wordCount").setMaster("local")
    val sc = new SparkContext(sparkConf)

    val config = new Configuration()
    config.set("mongo.input.uri", "mongodb://127.0.0.1:27017/beowulf.input")
    config.set("mongo.output.uri", "mongodb://127.0.0.1:27017/beowulf.output")

    val mongoRDD = sc.newAPIHadoopRDD(config, classOf[com.mongodb.hadoop.MongoInputFormat], classOf[Object], classOf[BSONObject])

    // Input contains tuples of (ObjectId, BSONObject)
    val countsRDD = mongoRDD.flatMap(arg => {
      var str = arg._2.get("text").toString
      str = str.toLowerCase().replaceAll("[.,!?\n]", " ")
      str.split(" ")
    })
      .map(word => (word, 1))
      .reduceByKey((a, b) => a + b)

    // Output contains tuples of (null, BSONObject) - ObjectId will be generated by Mongo driver if null
    val saveRDD = countsRDD.map((tuple) => {
      var bson = new BasicBSONObject()
      bson.put("word", tuple._1)
      bson.put("count", tuple._2)
      (null, bson)
    })
    // Only MongoOutputFormat and config are relevant
    saveRDD.saveAsNewAPIHadoopFile("file:///bogus", classOf[Any], classOf[Any], classOf[com.mongodb.hadoop.MongoOutputFormat[Any, Any]], config)

  }
 }
